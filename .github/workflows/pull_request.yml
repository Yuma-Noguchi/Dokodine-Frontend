on:
    workflow_call:
      inputs:
        environment_name:
          required: true
          type: string

jobs:
  build-and-test:
    name: "Build and Test"
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Build Docker image
      run: docker build -t dokodine-frontend:${{ github.sha }} .

    - name: Run Docker container
      run: |
        docker run -d -p 3000:3000 --name dokodine-frontend-container dokodine-frontend:${{ github.sha }}
        docker run --rm --network container:dokodine-frontend-container appropriate/curl -s -f http://localhost:3000 || exit 1


    - name: Stop and remove container
      if: always()
      run: |
        docker stop dokodine-frontend-container
        docker rm dokodine-frontend-container

  terraform:
    needs: [build-and-test]
    name: "Terraform Plan"
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment_name }}
    env:
      TF_WORKSPACE: ${{ secrets.TF_WORKSPACE }}
      TF_CLOUD_ORGANIZATION: "${{ vars.TF_ORGANIZATION }}"
      TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
      CONFIG_DIRECTORY: "./terraform"
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Upload Configuration
        uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.0.0 #hashicorp/setup-terraform@v2
        id: plan-upload
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          directory: ${{ env.CONFIG_DIRECTORY }}
          speculative: true

      - name: Create Plan Run
        uses: hashicorp/tfc-workflows-github/actions/create-run@v1.0.0
        id: plan-run
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          configuration_version: ${{ steps.plan-upload.outputs.configuration_version_id }}
          plan_only: true

      - name: Get Plan Output
        uses: hashicorp/tfc-workflows-github/actions/plan-output@v1.0.0
        id: plan-output
        with:
          plan: ${{ fromJSON(steps.plan-run.outputs.payload).data.relationships.plan.data.id }}

      - name: Update PR
        uses: actions/github-script@v6
        id: plan-comment
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Cloud Plan Output')
            });
            const output = `#### Terraform Cloud Plan Output
                \`\`\`
                Plan: ${{ steps.plan-output.outputs.add }} to add, ${{ steps.plan-output.outputs.change }} to change, ${{ steps.plan-output.outputs.destroy }} to destroy.
                \`\`\`
                [Terraform Cloud Plan](${{ steps.plan-run.outputs.run_link }})
                `;
            // 3. Delete previous comment so PR timeline makes sense
            if (botComment) {
              github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
              });
            }
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });