on:
    workflow_call:
      inputs:
        environment_name:
          required: true
          type: string

jobs:
    terraform:
      name: "Terraform Apply"
      runs-on: ubuntu-latest
      environment:
        name: ${{ inputs.environment_name }}
      env:
        TF_WORKSPACE: ${{ secrets.TF_WORKSPACE }}
        TF_CLOUD_ORGANIZATION: "${{ vars.TF_ORGANIZATION }}"
        TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
        CONFIG_DIRECTORY: "./terraform"
      permissions:
        contents: read
      steps:
        - name: Checkout
          uses: actions/checkout@v4
  
        - name: Upload Configuration
          uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.0.0
          id: apply-upload
          with:
            workspace: ${{ env.TF_WORKSPACE }}
            directory: ${{ env.CONFIG_DIRECTORY }}
  
        - name: Create Apply Run
          uses: hashicorp/tfc-workflows-github/actions/create-run@v1.0.0
          id: apply-run
          with:
            workspace: ${{ env.TF_WORKSPACE }}
            configuration_version: ${{ steps.apply-upload.outputs.configuration_version_id }}
  
        - name: Apply
          uses: hashicorp/tfc-workflows-github/actions/apply-run@v1.0.0
          if: fromJSON(steps.apply-run.outputs.payload).data.attributes.actions.IsConfirmable
          id: apply
          with:
            run: ${{ steps.apply-run.outputs.run_id }}
            comment: "Apply Run from GitHub Actions CI ${{ github.sha }}"
    
    build-and-deploy:
      runs-on: ubuntu-latest
      needs: [terraform]
      environment:
        name: ${{ inputs.environment_name }}
      env:
        GAR_LOCATION: ${{ vars.GAR_LOCATION }}
        PROJECT_ID: ${{ secrets.PROJECT_ID }}
        SERVICE_NAME: ${{ vars.SERVICE_NAME }}
        GAR_REPO: ${{ vars.GAR_REPO }}
      
      steps:
      - uses: actions/checkout@v4
  
      - name: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'
  
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
  
      - name: Authorize Docker push
        run: gcloud auth configure-docker $GAR_LOCATION-docker.pkg.dev
  
      - name: Build and push Docker image
        run: |
          docker build -t $GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$GAR_REPO/$SERVICE_NAME:${{ github.sha }} .
          docker push $GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$GAR_REPO/$SERVICE_NAME:${{ github.sha }}
  
      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy $SERVICE_NAME \
            --image $GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$GAR_REPO/$SERVICE_NAME:${{ github.sha }} \
            --region $GAR_LOCATION \
            --platform managed \
            --allow-unauthenticated